name: Hickory On-Demand Status

on:
  workflow_dispatch:
    inputs:
      who:
        description: "Ki? (bob|lara|suzy|lucy|all)"
        required: true
        default: "all"
      scope:
        description: "Komponens (wallet|hicscan|dex|infra|docs|whitepaper|all)"
        required: true
        default: "all"
      sinceDays:
        description: "HÃ¡ny napra vissza?"
        required: true
        default: "7"

jobs:
  status:
    runs-on: ubuntu-latest
    steps:
      - name: Build status text
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const who = core.getInput('who');
            const scope = core.getInput('scope');
            const sinceDays = parseInt(core.getInput('sinceDays'), 10);
            const since = new Date(Date.now() - sinceDays*24*60*60*1000).toISOString();
            const { owner, repo } = context.repo;

            const mapWho = {
              bob:  'Bob-HickoryAI',
              lara: 'Lara-HickoryAI',
              suzy: 'Suzy-HickoryAI',
              lucy: 'Lucy-HickoryAI'
            };
            const userFilter = (who === 'all') ? null : mapWho[who.toLowerCase()];
            const labelMap = {
              wallet: 'comp:wallet',
              hicscan: 'comp:hicscan',
              dex: 'comp:dex',
              infra: 'comp:infra',
              docs: 'comp:docs',
              whitepaper: 'comp:whitepaper'
            };
            const labelFilter = (scope === 'all') ? null : labelMap[scope.toLowerCase()];

            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'all', per_page: 100 });
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'all', per_page: 100, since });

            const matchUser = (login) => !userFilter || (login && login.toLowerCase() === userFilter.toLowerCase());
            const matchLabel = (labels=[]) => !labelFilter || labels.some(l => l.name === labelFilter);

            const prsRecent = prs.filter(p =>
              new Date(p.updated_at) >= new Date(since) &&
              matchUser(p.user?.login) &&
              matchLabel(p.labels)
            );

            const issuesDaily = issues.filter(i =>
              !i.pull_request &&
              matchLabel(i.labels) &&
              matchUser(i.assignee?.login || i.user?.login) &&
              (i.labels || []).some(l => l.name === 'status:daily')
            );

            const prLine = p => `â€¢ PR #${p.number} ${p.title} â€” ${p.state.toUpperCase()} â€” by ${p.user.login}  ${p.html_url}`;
            const isLine = i => `â€¢ ${i.title} â€” by ${i.user.login}  ${i.html_url}`;

            const list = (arr, f, max=12) => arr.slice(0, max).map(f).join('\n') || 'â€¢ none';

            const header = `ðŸ§­ **On-Demand Status** | who: \`${who}\`, scope: \`${scope}\`, since: ${since.substring(0,10)}`;
            const text = [
              header, '',
              `**Daily stÃ¡tusz issue-k** (${issuesDaily.length})`,
              list(issuesDaily, isLine), '',
              `**PR-ek (recent)** (${prsRecent.length})`,
              list(prsRecent, prLine), '',
              `Repo: \`${owner}/${repo}\``
            ].join('\n');

            core.setOutput('msg', text);

      - name: Send to Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: ${{ steps.build.outputs.msg }}
