name: Hickory Weekly Report

on:
  schedule:
    - cron: "0 6 * * MON"   # 06:00 UTC ‚âà 07:00 CET (t√©l) / 08:00 CEST (ny√°r)
  workflow_dispatch:

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Build weekly summary (last 7 days)
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const since = new Date(Date.now() - 7*24*60*60*1000).toISOString();
            const { owner, repo } = context.repo;

            // PR-k (merged az elm√∫lt 7 napban)
            const prsClosed = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'closed', per_page: 100 });
            const mergedPRs = prsClosed.filter(p => p.merged_at && p.merged_at >= since);

            // Nyitott PR-k, amik friss√ºltek az elm√∫lt 7 napban
            const openPRs = (await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 }))
              .filter(p => new Date(p.updated_at).toISOString() >= since);

            // Issues (nyitott/z√°rt az elm√∫lt 7 napban)
            const issuesAll = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'all', per_page: 100, since });
            const openedIssues = issuesAll.filter(i => !i.pull_request && new Date(i.created_at).toISOString() >= since);
            const closedIssues = issuesAll.filter(i => !i.pull_request && i.closed_at && i.closed_at >= since);

            // Commitek az elm√∫lt 7 napban
            const commits = (await github.rest.repos.listCommits({ owner, repo, since, per_page: 100 })).data;

            // Releases (utols√≥ / ut√≥bbi 7 napban)
            const releases = await github.paginate(github.rest.repos.listReleases, { owner, repo, per_page: 20 });
            const recentReleases = releases.filter(r => r.published_at && r.published_at >= since);
            const lastRelease = releases[0];

            const link = (text, url) => `[${text}](${url})`;
            const prLine = p => `‚Ä¢ #${p.number} ${p.title} ‚Äî by ${p.user.login}  ${link('PR', p.html_url)}`;
            const isLine = i => `‚Ä¢ #${i.number} ${i.title} ‚Äî by ${i.user.login}  ${link('Issue', i.html_url)}`;
            const cLine  = c => `‚Ä¢ ${c.sha.substring(0,7)} ‚Äî ${c.commit.message.split('\\n')[0]}  ${link('Commit', c.html_url)}`;

            const list = (arr, map, max=10) => arr.slice(0, max).map(map).join('\n') || '‚Ä¢ none';

            const header = `üìä **Hickory Weekly Report**  _(since ${since.substring(0,10)})_`;
            const mergedBlock = `‚úÖ **Merged PRs (${mergedPRs.length})**\n${list(mergedPRs, prLine)}`;
            const openBlock   = `üß© **Open PRs updated (${openPRs.length})**\n${list(openPRs, prLine)}`;
            const issuesBlock = `‚ùó **Issues ‚Äî opened: ${openedIssues.length}, closed: ${closedIssues.length}**\n` +
                                `Opened:\n${list(openedIssues, isLine)}\n\nClosed:\n${list(closedIssues, isLine)}`;
            const commitsBlock= `üì¶ **Commits (${commits.length})**\n${list(commits, cLine, 15)}`;
            const releasesBlock = lastRelease
              ? `üè∑Ô∏è **Last release:** ${lastRelease.tag_name} ‚Äî ${new Date(lastRelease.published_at).toISOString().substring(0,10)}  ${link('Release', lastRelease.html_url)}\n` +
                (recentReleases.length ? `Recent (7d): ${recentReleases.map(r => r.tag_name).join(', ')}` : 'Recent (7d): none')
              : 'üè∑Ô∏è **Last release:** none';

            const quickLinks =
              `üîó **Quick links**\n` +
              `‚Ä¢ ${link('PRs', \`https://github.com/\${owner}/\${repo}/pulls\`)}  ` +
              `‚Ä¢ ${link('Issues', \`https://github.com/\${owner}/\${repo}/issues\`)}  ` +
              `‚Ä¢ ${link('Commits', \`https://github.com/\${owner}/\${repo}/commits\`)}  ` +
              `‚Ä¢ ${link('Actions', \`https://github.com/\${owner}/\${repo}/actions\`)}  ` +
              `‚Ä¢ ${link('Releases', \`https://github.com/\${owner}/\${repo}/releases\`)}`;

            const text = [
              header, '',
              mergedBlock, '',
              openBlock, '',
              issuesBlock, '',
              commitsBlock, '',
              releasesBlock, '',
              quickLinks, '',
              `Repo: \`${owner}/${repo}\``
            ].join('\n');

            core.setOutput('msg', text);

      - name: Send Weekly Report to Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: ${{ steps.build.outputs.msg }}
